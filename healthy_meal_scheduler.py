import datetime
import os.path
import random

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

from config import get_settings
from read_google_sheet import load_meals_from_google_sheet as load_meals

settings = get_settings()

SHEET_NAME = settings.SHEET_NAME
CREDENTIALS_FILE = settings.CREDENTIALS_FILE

# If modifying these SCOPES, delete the token.json file
SCOPES = settings.CALENDAR_API_SCOPES

# Meal data as dictionary hardcoded for fallback
# meals = {
#     "morning": [
#         "–ß–∞—à–∞ —Ç–æ–ø–ª–∞ –≤–æ–¥–∞ —Å –ª–∏–º–æ–Ω –∏ –º–µ–¥",
#         "1 —á–∞—à–∞ –∞–ª–æ–µ –≤–µ—Ä–∞ + —Å–æ–∫ –æ—Ç –Ω–∞—Ä (50/50 –º–ª)",
#         "2 –≤–∞—Ä–µ–Ω–∏ —è–π—Ü–∞ —Å –∞–≤–æ–∫–∞–¥–æ",
#         "–§–∏–ª–∏—è —Ä—ä–∂–µ–Ω–æ —Ö–ª–µ–±—á–µ —Å –º–∞—Å–ª–æ",
#         "–ó–µ–ª–µ–Ω —Å–º—É—Ç–∏: —Å–ø–∞–Ω–∞–∫ + –±–∞–Ω–∞–Ω + —á–∏–∞ + —Ä–∞—Å—Ç–∏—Ç–µ–ª–Ω–æ –º–ª—è–∫–æ"
#     ],
#     "late_breakfast": [
#         "1 –Ω–∞—Ä / –∫–∏–≤–∏ / —á–∞—à–∞ –±–æ—Ä–æ–≤–∏–Ω–∫–∏",
#         "10 –æ—Ä–µ—Ö–∞ –∏–ª–∏ –±—Ä–∞–∑–∏–ª—Å–∫–∏ —è–¥–∫–∏",
#         "1 —á–∞—à–∞ –∑–µ–ª–µ–Ω —á–∞–π"
#     ],
#     "lunch": [
#         "–ü–µ—á–µ–Ω–∞ —Ä–∏–±–∞ –∏–ª–∏ –ø–∏–ª–µ—à–∫–æ —Ñ–∏–ª–µ",
#         "1 —á–∞—à–∞ –∫–∞—Ñ—è–≤ –æ—Ä–∏–∑ –∏–ª–∏ –∫–∏–Ω–æ–∞",
#         "–°–∞–ª–∞—Ç–∞ —Å —Ü–≤–µ–∫–ª–æ, –∫—Ä–∞—Å—Ç–∞–≤–∏—Ü–∞, –∑–µ—Ö—Ç–∏–Ω –∏ –ª–∏–º–æ–Ω",
#         "–õ–µ—â–∞ —á–æ—Ä–±–∞ –∏–ª–∏ –±–æ–± —è—Ö–Ω–∏—è"
#     ],
#     "snack": [
#         "–ß–∞—à–∞ –∞–π—Ä—è–Ω —Å —á–µ—Å—ä–Ω",
#         "–®–µ–ø–∞ —Ç–∏–∫–≤–µ–Ω–∏ —Å–µ–º–∫–∏",
#         "–ë–∏–ª–∫–æ–≤ —á–∞–π: –∫–æ–ø—Ä–∏–≤–∞, –ª–∞–π–∫–∞, –Ω–µ–≤–µ–Ω"
#     ],
#     "dinner": [
#         "–ü–µ—á–µ–Ω–∏ –∫–∞—Ä—Ç–æ—Ñ–∏ —Å—ä—Å —Å–∞–ª–∞—Ç–∞",
#         "–ü–µ—á–µ–Ω–∞ —Å—å–æ–º–≥–∞ –∏ –∑–µ–ª–µ–Ω—á—É—Ü–∏",
#         "–°–∞–ª–∞—Ç–∞ —Å —á–µ—Å—ä–Ω, –∑–µ—Ö—Ç–∏–Ω, –∫—É—Ä–∫—É–º–∞"
#     ],
#     "before_sleep": [
#         "–ß–∞—à–∞ —Ç–æ–ø–ª–æ –º–ª—è–∫–æ —Å –∫—É—Ä–∫—É–º–∞",
#         "1 —á.–ª. –ø—á–µ–ª–µ–Ω –ø—Ä–æ–ø–æ–ª–∏—Å (–≤–æ–¥–µ–Ω —Ä–∞–∑—Ç–≤–æ—Ä)",
#         "1 —á–∞—à–∞ –≤–æ–¥–∞ —Å –ª–∏–º–æ–Ω",
#         "1 —á.–ª. –∞—à–≤–∞–≥–∞–Ω–¥–∞"
#     ]
# }

meals = load_meals(SHEET_NAME)

time_slots = {
    "morning": (7, 0),
    "late_breakfast": (10, 30),
    "lunch": (13, 0),
    "snack": (16, 0),
    "dinner": (19, 0),
    "before_sleep": (21, 30),
}


def authenticate_google_calendar():
    creds = None
    if os.path.exists("token.json"):
        creds = Credentials.from_authorized_user_file(CREDENTIALS_FILE, SCOPES)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
            creds = flow.run_local_server(port=0)

        with open("token.json", "w") as token:
            token.write(creds.to_json())

    return build("calendar", "v3", credentials=creds)


def create_meal_event(service, title, description, hour, minute):
    today = datetime.date.today()
    start_time = datetime.datetime(today.year, today.month, today.day, hour, minute)
    end_time = start_time + datetime.timedelta(minutes=30)

    event = {
        "summary": f"üçΩÔ∏è {title}",
        "description": description,
        "start": {
            "dateTime": start_time.isoformat(),
            "timeZone": "Europe/Sofia",
        },
        "end": {
            "dateTime": end_time.isoformat(),
            "timeZone": "Europe/Sofia",
        },
        "reminders": {
            "useDefault": False,
            "overrides": [
                {"method": "popup", "minutes": 10},
            ],
        },
    }

    event_result = service.events().insert(calendarId="primary", body=event).execute()
    print(f"Created: {event_result.get('summary')} at {start_time.time()}")


def main():
    service = authenticate_google_calendar()

    for slot, meal_list in meals.items():
        meal = random.choice(meal_list)
        title = slot.replace("_", " ").title()
        hour, minute = time_slots[slot]
        create_meal_event(service, title, meal, hour, minute)


if __name__ == "__main__":
    main()
